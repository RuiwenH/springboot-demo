<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.reven</groupId>
	<artifactId>springboot-demo</artifactId>
	<version>0.0.1</version>
	<packaging>jar</packaging>

	<name>Spring Boot Demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.14.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<!-- 项目打包时，输出到指定文件夹 -->
		<project.outputDirectory>output</project.outputDirectory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!-- maven.build.timestamp 默认时间戳格式 -->
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> 
			</dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> 
			</dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> 
			</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- 监控 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.5.0</version>
		</dependency>
		<!-- swagger-ui -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<!-- <dependency> <groupId>org.springframework.session</groupId> <artifactId>spring-session</artifactId> </dependency> -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.8</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--mybatis通用Mapper插件 -->
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper-spring-boot-starter</artifactId>
			<version>1.2.4</version>
		</dependency>
		<!-- mybatis 分页插件pagehelper -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.4</version>
		</dependency>

		<!-- 哪个更好？ -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.47</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>

		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.3.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>24.1-jre</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.lingala.zip4j/zip4j -->
		<dependency>
			<groupId>net.lingala.zip4j</groupId>
			<artifactId>zip4j</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- jxls excel导出 -->
		<dependency>
			<groupId>org.jxls</groupId>
			<artifactId>jxls</artifactId>
			<version>2.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.jxls</groupId>
			<artifactId>jxls-poi</artifactId>
			<version>1.0.13</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.16</version>
		</dependency>

		<!-- 有些第三方jar，担心其变更代码不修改版本，将其jar放入工程lib目录。demo -->
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>echarts</artifactId>
			<version>4.0.4</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/lib/echarts-4.0.4.jar</systemPath>
		</dependency>


		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>3.6</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		    <!-- xss过滤组件 -->
	    <dependency>
	      <groupId>org.jsoup</groupId>
	      <artifactId>jsoup</artifactId>
	      <version>1.15.3</version>
	    </dependency>
	    
	    <!-- sftp -->
	    <dependency>
		    <groupId>com.jcraft</groupId>
		    <artifactId>jsch</artifactId>
		    <version>0.1.55</version>
		</dependency>
		<!-- Email发送功能 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
	</dependencies>

	<build>
		<!-- 指定打包的名字 -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!-- spring-boot:run 中文乱码解决 -->
					<jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
					<!-- 打包时，将本地引用的jar一起打成jar -->
					<includeSystemScope>true</includeSystemScope>
					<outputDirectory>${project.outputDirectory}</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
							<!-- 利用重新打包，将文件排除 -->
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<!-- 使用缓存 用于修改部分文件，例如增加js的版本 -->
					<useCache>true</useCache>
					<excludes>
						<!-- 打包时排除指定文件 -->
						<exclude>config/*</exclude>
						<exclude>app.sh</exclude>
						<exclude>assembly/**</exclude>
					</excludes>
				</configuration>
				<executions>
					<!-- 在打包之前执行，打包后包含已经执行后的文件 -->
					<execution>
						<id>prepare-jar</id>
						<phase>prepare-package</phase>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- urefire 插件用来在maven构建生命周期的test phase执行一个应用的单元测试 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!-- 忽略单元测试 -->
					<skipTests>true</skipTests>
				</configuration>
			</plugin>

			<!-- 指定编译的java版本和编码格式 -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-config</id>
						<phase>validate</phase>
						<goals>
							<goal>resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<!-- 将指定文件复制到outputDirectory -->
							<outputDirectory>
								${project.outputDirectory}
							</outputDirectory>
							<resources>
								<resource>
									<!--项目中的路径 -->
									<directory>src/main/resources/</directory>
									<filtering>true</filtering>
									<!-- 复制哪些文件。。。 -->
									<includes>
										<include>config/*</include>
										<include>app.sh</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- assembly压缩文档 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>assembly</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>src/main/resources/assembly/assembly.xml</descriptor>
							</descriptors>
							<outputDirectory>${project.outputDirectory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.3</version>
				<executions>
					<!-- 打包前进行替换 -->
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 自动识别到项目target文件夹 -->
					<basedir>${build.directory}</basedir>
					<!-- 替换的文件所在目录规则 -->
					<includes>
						<include>**/*.shtml</include>
						<include>**/*.html</include>
						<include>**/*.jsp</include>
					</includes>
					<replacements>
						<!-- 替换指定内容 -->
						<replacement>
							<token>#set var=\"version\" value=\"1.0.0.0\"</token>
							<value>#set var=\"version\" value=\"${maven.build.timestamp}\"</value>
						</replacement>
						<!-- 更改规则，在css/js文件末尾追加?v=时间戳，反斜杠表示字符转义 -->

						<replacement>
							<token>\.css\'</token>
							<value>.css?version=${maven.build.timestamp}\'</value>
						</replacement>
						<replacement>
							<token>\.css\"</token>
							<value>.css?version=${maven.build.timestamp}\"</value>
						</replacement>
						<replacement>
							<token>\.js\'</token>
							<value>.js?version=${maven.build.timestamp}\'</value>
						</replacement>
						<replacement>
							<token>\.js\"</token>
							<value>.js?version=${maven.build.timestamp}\"</value>
						</replacement>
					</replacements>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- 指定私服 -->
	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Repository</name>
			<url>http://repo1.maven.org/maven2/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>
